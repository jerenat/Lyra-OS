Fuentes:
como armar ISO Bootable con el menu GRUB:
https://www.gnu.org/software/grub/manual/grub/html_node/Invoking-grub_002dmkrescue.html#Invoking-grub_002dmkrescue

Sources os:
https://sourceforge.net/projects/luxur/
https://sourceforge.net/projects/nuos/
https://visopsys.org/
https://github.com/torvalds/linux
https://github.com/kalamangga-net/linux-1.0
https://github.com/tadryanom/lux



Información adicional:
El sistema operativo utilizado para compilar dicho nucleo es: Ubuntu 16.04 LTS x86, ya que el kernel solo es compatible (de momento) con 32 Bits
el GNU C Compiler, su versión es: gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12) 
el Kernel de Linux usado es: Linux osboxes 4.15.0-142-generic #146~16.04.1-Ubuntu SMP Tue Apr 13 09:26:57 UTC 2021 i686 i686 i686 GNU/Linux



REGISTROS:
Se obtuvieron componentes principalmente de "LuxurOS"
Se extrajeron las librerias "ia32.c" de -> NuOS
Se obtuvieron librerias de "Visopsys" -> sistema operativo en C con interfaz grafica
Se obtuvieron librerias de tiempo y CMOS de -> Lux-kernel
Se basaron diseños de Linux, asi como algunos comentarios



se creo Makefile -> convierte todos a un unico archivo enlazable desde GRUB, se verificaron las lineas y se re-escribio su codigo con ChatGPT

se separaron las carpetas:
boot -> contiene el archivo "boot.S" en ensamblador, el cual se extrajo de otro codigo
include -> contiene las cabeceras del sistema
kernel -> contiene el kernel del sistema
lib -> contiene las librerias compilables con el sistema, todo se reduce a "lib.o"


Se agregó FAT12, soporta hasta 16mb de memoria en cluster, pero para el sistema empotrado es mas que suficiente
el IMG -> Contiene una capacidad de 1440kb (1.44mb),

Se agregó un shell básico con ayuda y las funciones esenciales.

Todas las funciones del sistema enlazadas se encuentran dentro de stdio.h
Las estructuras con enteros de tipo se encuentran dentro de stddef.h

la cabecera "include/boot/multiboot.h" -> contiene las estructuras basicas para poder arrancar el ELF con grub y, es esencial para arranque de cualquier programa escrito en C,
dicha cabecera se puede extraer de cualquier repositorio, teniendo en cuenta que:
el archivo "link.ld" es el que enlaza con el ELF, puede ser de x64 o de 32 bits ¿Como me doy cuenta de ello?:

el link.ld de 32 bits contiene dicho formato -> .text 0x100000 :
el link.ld de 64 bits contiene dicho formato -> .text = 0x10000200000;

se le agrega el entero de 32 bits + la capacidad de memoria del computador


se agrego el archivo "ia32.c" -> extraido de otro codigo, el cual, si bien contiene otras funciones, la mas importante es "reboot",
quien actua con la Salida del procesador para dar reinicio al sistema.


Llamadas al sistema (syscall.c)
cls -->             0
puts -->            1
gets -->            2
file_open -->       3
sleep -->           4
shell -->           5
putchar -->         6
kprintf -->         7
exec -->            8
cd -->              9
get_file_size-->    10
ls -->              11


Identificadores para Printf
%d para enteros.
%f para números de punto flotante.
%s para cadenas.
%p para punteros.
%u para unsigned int
%zu para unidades de tiempo size_t

?/5/24:
se creo un repositorio en GitHub para almacenar los archivos:
https://github.com/jerenat/os-test  -> es privado


12/5/24:
Se creo el archivo Makefile para compilar el kernel con todas sus librerias en GCC

2/6/24:
Se añadieron las librerías en C de tipo:

rtc.c -> Real-Time clock, escencial para el tiempo de reloj del procesador
time.c -> Tiempo, incluye UTC/UTF, mide las unidades de tiempo en Segs. tambien sirve como semilla para Random Numbers
io.h -> (Cabecera), se definen por unica vez, y se basan en entradas y salidas del procesador, escritas con __asm__ volatile, sirven para la escucha del procesador y espera del mismo en el encendido
rand.c -> Genera números aleatorios de 0 a 65535 (x64), para ello se tuvo que modificar el printf.c y agregarle %u, %zu, %d
se creó la cabecera stddef.h -> que contiene los tipos:

int8_t, int16_t, int32_t, int64_t, size_t, NULL

isdigit.c -> se agrego a LIBC, y contiene el verificador int (o boleano), para detectar si es digito u otro tipo

se agregaron a la carpeta include/time:
io.h -> contiene los componentes de Entrada y Salida de datos en el procesador (escrito en ASM, y traducido a C), -> similar a es.h
rand.h -> contiene la semilla de timer para crear un numero aleatorio
rtc.h -> gestiona los ciclos de reloj de CMOS
time.h -> contiene el tiempo, se basa en rtc.h para operar a base de segundos de ciclo de reloj de CMOS


en Draw.io se creó el esquema del kernel, como se vería crudamente

6/7/2024:
en la función rtc.c, se creó la funcion "sleep_seconds(segs);" la cual proporciona un sleep de tantos segundos basado en el tiempo de reloj del CMOS

se agregaron multiples funciones:
strtok.c -> La función strtok en C se utiliza para dividir una cadena (string) en tokens o partes más pequeñas basadas en un conjunto de delimitadores especificados.
strstr.c -> La función strstr en C se utiliza para encontrar la primera ocurrencia de una subcadena dentro de otra cadena más grande.
strrchr.c -> La función strrchr en C se utiliza para encontrar la última ocurrencia de un carácter específico dentro de una cadena. Devuelve un puntero al carácter encontrado, o NULL si el carácter no está presente en la cadena.
strncpy.c -> La función strncpy en C se utiliza para copiar una cantidad específica de caracteres desde una cadena de origen (src) a una cadena de destino (dest). Esta función es útil cuando se desea copiar una porción de una cadena en lugar de la cadena completa.
strncmp.c ->  La funcion strncmp es una función estándar en C que se utiliza para comparar los primeros n caracteres de dos cadenas.
strcspn.c -> strcspn es una función estándar en C que se utiliza para determinar la longitud del segmento inicial de una cadena que consiste únicamente en caracteres que no están en otra cadena dada.
strchr.c -> La función strchr en C se utiliza para encontrar la primera ocurrencia de un carácter específico dentro de una cadena. Devuelve un puntero al carácter encontrado, o NULL si el carácter no está presente en la cadena.
sqrt.c -> // Función para calcular la raíz cuadrada

tanto "timer" como "rtc" actuan con la memoria de reloj del CMOS, pero ambos cumplen funciones totalmente diferentes.

se agrego "version.h" -> la cabecera trabaja con el GCC a programar, ya que contiene la version de kernel, y la fecha de compilación del programa,


Se creo las cabeceras
math.h -> contiene los operadores matematicos
stdbool.h -> contiene los operadores lógicos 'true' y 'false'
string.h -> contiene todas las funciones de manejo de strings